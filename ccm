#!/usr/bin/python

import os, sys

L = os.path.realpath(__file__).split(os.path.sep)[:-1]
root = os.path.sep.join(L)
sys.path.append(os.path.join(root, 'cmds'))
import command, common
from cluster_cmds import *
from cluster_cass_cmds import *
from node_cmds import *
from node_cass_cmds import *

def get_command(kind, cmd):
    cmd_name = kind.lower().capitalize() + cmd.lower().capitalize() + "Cmd"
    try:
        klass = globals()[cmd_name]
    except KeyError:
        return None
    if not issubclass(klass, command.Cmd):
        return None
    return klass()

def print_global_usage():
    print "Usage:"
    print "  ccm <cluster_cmd> [options]"
    print "  ccm <node_name> <node_cmd> [options]"
    print ""
    print "Where <node_name> is the name of a node of the current cluster, <cluster_cmd> is one of"
    for cmd_name in cluster_cmds():
        cmd = get_command("cluster", cmd_name)
        if not cmd:
            print "Internal error, unknown command {0}".format(cmd_name)
            exit(1)
        print "  {0:14} {1}".format(cmd_name, cmd.description())
    print "and <node_cmd> is one of"
    for cmd_name in node_cmds():
        cmd = get_command("node", cmd_name)
        if not cmd:
            print "Internal error, unknown command {0}".format(cmd_name)
            exit(1)
        print "  {0:14} {1}".format(cmd_name, cmd.description())
    exit(1)

if len(sys.argv) <= 1:
    print "Missing arguments"
    print_global_usage()

arg1 = sys.argv[1].lower()

if arg1 in cluster_cmds():
    kind = 'cluster'
    cmd = arg1
    cmd_args = sys.argv[2:]
else:
    if len(sys.argv) <= 2:
        print "Missing arguments"
        print_global_usage()
    kind = 'node'
    node = arg1
    cmd = sys.argv[2]
    cmd_args = [node] + sys.argv[3:]

cmd = get_command(kind, cmd)
if not cmd:
    print "Unknown node or command: {0}".format(arg1)
    exit(1)

parser = cmd.get_parser()

(options, args) = parser.parse_args(cmd_args)
cmd.validate(parser, options, args)

cmd.run()
